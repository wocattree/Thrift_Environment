////////////////////////////////
//filename:DeviceToUiHandler.cpp
//description:UI层服务端接受文件
//data:2022/09/18 21:15:39
//author:wocattree
////////////////////////////////

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DeviceToUi.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class DeviceToUiHandler : virtual public DeviceToUiIf {
 public:
  DeviceToUiHandler() {
    // Your initialization goes here
  }

  void ReportDeviceTemps(const MonitorTemps& monitortemps) 
  {
      int port = 9090;
      ::std::shared_ptr<DeviceToUiHandler> handler(new DeviceToUiHandler());
      ::std::shared_ptr<TProcessor> processor(new DeviceToUiProcessor(handler));
      ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
      ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
      ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
      TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
      server.serve();
    // Your implementation goes here
    printf("ReportDeviceTemps\n");
  }

};


