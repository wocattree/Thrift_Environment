/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DeviceToUi_H
#define DeviceToUi_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "ServerToUi_types.h"




#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DeviceToUiIf {
 public:
  virtual ~DeviceToUiIf() {}
  virtual void ReportDeviceTemps(const MonitorTemps& monitortemps) = 0;
};

class DeviceToUiIfFactory {
 public:
  typedef DeviceToUiIf Handler;

  virtual ~DeviceToUiIfFactory() {}

  virtual DeviceToUiIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceToUiIf* /* handler */) = 0;
  };

class DeviceToUiIfSingletonFactory : virtual public DeviceToUiIfFactory {
 public:
  DeviceToUiIfSingletonFactory(const ::std::shared_ptr<DeviceToUiIf>& iface) : iface_(iface) {}
  virtual ~DeviceToUiIfSingletonFactory() {}

  virtual DeviceToUiIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceToUiIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<DeviceToUiIf> iface_;
};

class DeviceToUiNull : virtual public DeviceToUiIf {
 public:
  virtual ~DeviceToUiNull() {}
  void ReportDeviceTemps(const MonitorTemps& /* monitortemps */) override {
    return;
  }
};

typedef struct _DeviceToUi_ReportDeviceTemps_args__isset {
  _DeviceToUi_ReportDeviceTemps_args__isset() : monitortemps(false) {}
  bool monitortemps :1;
} _DeviceToUi_ReportDeviceTemps_args__isset;

class DeviceToUi_ReportDeviceTemps_args {
 public:

  DeviceToUi_ReportDeviceTemps_args(const DeviceToUi_ReportDeviceTemps_args&);
  DeviceToUi_ReportDeviceTemps_args& operator=(const DeviceToUi_ReportDeviceTemps_args&);
  DeviceToUi_ReportDeviceTemps_args() noexcept {
  }

  virtual ~DeviceToUi_ReportDeviceTemps_args() noexcept;
  MonitorTemps monitortemps;

  _DeviceToUi_ReportDeviceTemps_args__isset __isset;

  void __set_monitortemps(const MonitorTemps& val);

  bool operator == (const DeviceToUi_ReportDeviceTemps_args & rhs) const
  {
    if (!(monitortemps == rhs.monitortemps))
      return false;
    return true;
  }
  bool operator != (const DeviceToUi_ReportDeviceTemps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceToUi_ReportDeviceTemps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceToUi_ReportDeviceTemps_pargs {
 public:


  virtual ~DeviceToUi_ReportDeviceTemps_pargs() noexcept;
  const MonitorTemps* monitortemps;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceToUi_ReportDeviceTemps_result {
 public:

  DeviceToUi_ReportDeviceTemps_result(const DeviceToUi_ReportDeviceTemps_result&) noexcept;
  DeviceToUi_ReportDeviceTemps_result& operator=(const DeviceToUi_ReportDeviceTemps_result&) noexcept;
  DeviceToUi_ReportDeviceTemps_result() noexcept {
  }

  virtual ~DeviceToUi_ReportDeviceTemps_result() noexcept;

  bool operator == (const DeviceToUi_ReportDeviceTemps_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceToUi_ReportDeviceTemps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceToUi_ReportDeviceTemps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceToUi_ReportDeviceTemps_presult {
 public:


  virtual ~DeviceToUi_ReportDeviceTemps_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DeviceToUiClient : virtual public DeviceToUiIf {
 public:
  DeviceToUiClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DeviceToUiClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ReportDeviceTemps(const MonitorTemps& monitortemps) override;
  void send_ReportDeviceTemps(const MonitorTemps& monitortemps);
  void recv_ReportDeviceTemps();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DeviceToUiProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DeviceToUiIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (DeviceToUiProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReportDeviceTemps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DeviceToUiProcessor(::std::shared_ptr<DeviceToUiIf> iface) :
    iface_(iface) {
    processMap_["ReportDeviceTemps"] = &DeviceToUiProcessor::process_ReportDeviceTemps;
  }

  virtual ~DeviceToUiProcessor() {}
};

class DeviceToUiProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DeviceToUiProcessorFactory(const ::std::shared_ptr< DeviceToUiIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< DeviceToUiIfFactory > handlerFactory_;
};

class DeviceToUiMultiface : virtual public DeviceToUiIf {
 public:
  DeviceToUiMultiface(std::vector<std::shared_ptr<DeviceToUiIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DeviceToUiMultiface() {}
 protected:
  std::vector<std::shared_ptr<DeviceToUiIf> > ifaces_;
  DeviceToUiMultiface() {}
  void add(::std::shared_ptr<DeviceToUiIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ReportDeviceTemps(const MonitorTemps& monitortemps) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportDeviceTemps(monitortemps);
    }
    ifaces_[i]->ReportDeviceTemps(monitortemps);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DeviceToUiConcurrentClient : virtual public DeviceToUiIf {
 public:
  DeviceToUiConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DeviceToUiConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ReportDeviceTemps(const MonitorTemps& monitortemps) override;
  int32_t send_ReportDeviceTemps(const MonitorTemps& monitortemps);
  void recv_ReportDeviceTemps(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
